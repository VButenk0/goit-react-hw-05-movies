{"version":3,"file":"static/js/387.1a2484ae.chunk.js","mappings":"gRAAiBA,EAAWC,EAAQ,KAA5BC,QAEKC,EAAaH,EAAOI,GAAEC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qJAStBC,EAAaP,EAAOQ,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,yLAWtBI,EAAkBV,EAAOW,IAAGC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,qEAM5BO,EAAgBb,EAAOW,IAAGG,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,wK,kBCqCvC,EArDa,WACX,IAAQS,GAAOC,EAAAA,EAAAA,MAAPD,GAERE,GAAwBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAiB9B,OAfAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEC,OAFDF,EAAAC,KAAA,EAElBT,GAAa,GAAMQ,EAAAE,KAAA,GACAC,EAAAA,EAAAA,IAAgBtB,GAAI,KAAD,EAAhCkB,EAAIC,EAAAI,KACVhB,EAAQW,GAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEdM,EAAAA,OAAAA,QAAeN,EAAAK,GAAME,SAAS,QAEV,OAFUP,EAAAC,KAAA,GAE9BT,GAAa,GAAOQ,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAX,EAAA,wBAEvB,kBAVkB,OAAAH,EAAAe,MAAA,KAAAC,UAAA,KAWnBjB,GACF,GAAG,CAACb,KAGF+B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGvB,IAAawB,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IAChB,OAAJ7B,QAAI,IAAJA,GAAAA,EAAM8B,QACLF,EAAAA,EAAAA,KAAC9C,EAAU,CAAA6C,SACR3B,EAAK+B,KAAI,SAAAC,GAAA,IAAGtC,EAAEsC,EAAFtC,GAAIuC,EAAYD,EAAZC,aAAcC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UAAS,OAC5CV,EAAAA,EAAAA,MAACvC,EAAU,CAAAyC,SAAA,CACRM,GACCL,EAAAA,EAAAA,KAAA,OACEQ,IAAG,kCAAAC,OAAoCJ,GACvCK,IAAKJ,EACLK,MAAO,OAGTX,EAAAA,EAAAA,KAACpC,EAAa,CAAAmC,UACZC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAGPF,EAAAA,EAAAA,MAACpC,EAAe,CAAAsC,SAAA,EACdC,EAAAA,EAAAA,KAAA,MAAAD,SAAKO,KACLT,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,cAAYQ,UAdFzC,EAgBJ,OAIjBkC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+DAIZ,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["const { default: styled } = require('styled-components');\n\nexport const StyledList = styled.ul`\n  /* display: grid;\n  grid-template-columns: repeat(2, 450px);\n  grid-gap: 20px; */\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const StyledItem = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  padding: 20px;\n  background-color: #0b0d3f;\n  width: 400px;\n  border-radius: 10px;\n  border: 1px solid #f0f5ff;\n`;\n\nexport const StyledActorInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const StyledNoPhoto = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100px;\n  height: 150px;\n  text-align: center;\n  border: 1px solid #f0f5ff;\n`;\n","import { getMovieCredits } from 'API/API';\nimport { Notify } from 'notiflix';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  StyledActorInfo,\n  StyledItem,\n  StyledList,\n  StyledNoPhoto,\n} from './Cast.styled';\nimport Loader from 'components/loader/Loader';\n\nconst Cast = () => {\n  const { id } = useParams();\n\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchCastById = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getMovieCredits(id);\n        setCast(data);\n      } catch (error) {\n        Notify.failure(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCastById();\n  }, [id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {cast?.length ? (\n        <StyledList>\n          {cast.map(({ id, profile_path, name, character }) => (\n            <StyledItem key={id}>\n              {profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                  alt={name}\n                  width={100}\n                />\n              ) : (\n                <StyledNoPhoto>\n                  <p>No photo</p>\n                </StyledNoPhoto>\n              )}\n              <StyledActorInfo>\n                <h4>{name}</h4>\n                <p>Character: {character}</p>\n              </StyledActorInfo>\n            </StyledItem>\n          ))}\n        </StyledList>\n      ) : (\n        <h3>We don't have any informations about cast of this movie.</h3>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["styled","require","default","StyledList","ul","_templateObject","_taggedTemplateLiteral","StyledItem","li","_templateObject2","StyledActorInfo","div","_templateObject3","StyledNoPhoto","_templateObject4","id","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","isLoading","setIsLoading","useEffect","fetchCastById","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","getMovieCredits","sent","t0","Notify","message","finish","stop","apply","arguments","_jsxs","_Fragment","children","_jsx","Loader","length","map","_ref2","profile_path","name","character","src","concat","alt","width"],"sourceRoot":""}